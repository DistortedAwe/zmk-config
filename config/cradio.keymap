/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&mt {
  //  flavor = "tap-preferred";
   // tapping_term_ms = <500>;
};

/ {    
        behaviors {
                to_kp: behavior_kp_to {
                compatible = "zmk,behavior-hold-tap";
                label = "kp_to";
                #binding-cells = <2>;
                flavor = "hold-preferred";
                tapping-term-ms = <500>;
                bindings = <&to>, <&kp>;
                };

                tab: behavior_tab {
                compatible = "zmk,behavior-hold-tap";
                label = "tab";
                #binding-cells = <2>;
                flavor = "hold-preferred";
                tapping_term_ms = <500>;
                bindings = <&next_tab>, <&prev_tab>;
                };

                clip: behavior_clip {
                compatible = "zmk,behavior-hold-tap";
                label = "clip";
                #binding-cells = <2>;
                flavor = "hold-preferred";
                tapping_term_ms = <500>;
                bindings = <&cut_clip>, <&copy_clip>;
                };

                paste: behavior_paste {
                compatible = "zmk,behavior-hold-tap";
                label = "paste";
                #binding-cells = <2>;
                flavor = "hold-preferred";
                tapping_term_ms = <500>;
                bindings = <&paste_clip_format>, <&paste_clip>;
                };
        };
    
        combos {
                compatible = "zmk,comobos";
                combo_esc {
                        timeout-ms = <500>;
                        key-positions = <0 1>;
                        bindings = <&kp ESC>;
                };
                
                combo_bspc {
                        timeout-ms = <500>;
                        key-posiitons = <17 18>;
                        bindings = <&kp BSPC>;
                };
                
                combo_zero {
                        timeout-ms = <500>;
                        key-positions = <16 17>;
                        bindings = <&to 0>;
                };
        };

        macros {
                ZMK_MACRO(copy_capture,
                bindings = 
                <&macro_press &kp LSHIFT &kp LGUI>
                , <&macro_tap  &kp S>
                , <&macro_release &kp LSHIFT &kp LGUI>
                ;
                )

                ZMK_MACRO(next_tab,
                bindings = 
                <&macro_press &kp LCTL>
                , <&macro_tap  &kp TAB>
                , <&macro_release &kp LCTL>
                ;
                )
                
                ZMK_MACRO(prev_tab,
                bindings = 
                <&macro_press &kp LCTL &kp LSHIFT>
                , <&macro_tap  &kp TAB>
                , <&macro_release &kp LCTL &kp LSHIFT>
                ;
                )

                ZMK_MACRO(copy_clip,
                bindings = 
                <&macro_press &kp LCTL>
                , <&macro_tap  &kp C>
                , <&macro_release &kp LCTL>
                ;
                )

                ZMK_MACRO(cut_clip,
                bindings = 
                <&macro_press &kp LCTL>
                , <&macro_tap  &kp X>
                , <&macro_release &kp LCTL>
                ;
                )

                ZMK_MACRO(paste_clip,
                bindings = 
                <&macro_press &kp LCTL>
                , <&macro_tap  &kp V>
                , <&macro_release &kp LCTL>
                ;
                )

                ZMK_MACRO(paste_clip_format,
                bindings = 
                <&macro_press &kp LCTL &kp LSHIFT>
                , <&macro_tap  &kp V>
                , <&macro_release &kp LCTL &kp LSHIFT>
                ;
                )
        };

        keymap {
                compatible = "zmk,keymap";
                
       		zero {
		bindings = <
		&kp Q       &kp W       &kp E &kp R &kp T 			&kp Y &kp U  &kp I    &kp O   &kp P 
		&mt TAB A   &kp S       &kp D &kp F &kp G         	        &kp H &to_kp 4 J &kp K &kp L &kp QUOT
		&mt LGUI Z  &mt LALT X  &kp C &kp V &kp B	                &kp N &kp M  &kp CMMA &kp DOT &kp RET
          				&kp SPC &kp LCTL  			&kp LSHIFT &to 1 
		>;
		};

       		one {
		bindings = <
        &kp ESC   &prev_tab   &kp UP    &next_tab      &kp HOME                   &kp MINUS  &kp N7       &kp N8        &kp N9      &kp BSPC
        &kp TAB   &kp LEFT    &kp DOWN  &kp RIGHT      &kp END                    &kp EQUAL  &to_kp 4 N4  &kp N5        &kp N6      &kp LGUI
        &kp GRAVE &kp SLASH   &kp LALT  &mt BSLH SEMI  &mt RBKT LBKT              &kp N0     &kp N1       &mt COMMA N2  &mt DOT N3  &kp RET
                                        &to 0 &kp LCTL                            &kp LSHIFT &to 2
		>;
		};
		
		    two {
        bindings = <
        &kp ESC    &kp C_PLAY_PAUSE  &kp C_MUTE    &none      &none              &kp GRAVE  &kp LPAR       &kp RPAR  &none  &kp BSPC
        &kp TAB    &kp C_VOL_DN      &kp C_VOL_UP  &none      &none              &none      &to_kp 4 LBKT  &kp RBKT  &none  &to 3
        &kp GRAVE  &kp C_PREV        &kp C_NEXT    &kp COMMA  &kp DOT            &none      &kp SEMI       &kp BSLH  &none  &kp RET
                &to 0 &kp LCTL                                                   &kp LSHIFT &to 1
		>;
		};	
		    three {
        bindings = <
        &none &none &none &none &none            &none       &none         &none         &none         &kp BSPC
        &none &none &none &none &none            &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &to 3
        &none &none &none &none &none            &none       &none         &none         &none         &kp RET
                &to 0 &kp LCTL                         &kp LSHIFT &to 0
		>;
		};	
                four{
        bindings = <
        &none &none &none &none &none           &kp ESC        &tab           &none     &none  &kp BSPC
        &none &none &none &none &none           &copy_capture  &to_kp 0 LCTL  &kp LALT  &none  &none
        &none &none &none &none &none           &none          &clip          &paste    &none  &none
                &to 0 &none                         &kp LSHIFT &to 1
                >;
                };
	};
};

&kscan0 {
    input-gpios
    = <&pro_micro  7 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
    , <&pro_micro 18 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
    , <&pro_micro 19 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
    , <&pro_micro 20 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
    , <&pro_micro 21 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
    , <&pro_micro 15 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
    , <&pro_micro 14 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
    , <&pro_micro 16 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
    , <&pro_micro 10 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
    , <&pro_micro  1 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
    //, <&pro_micro  2 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>  // this is P0.17
    , <&gpio1      7 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>   // this is P1.07, can change the number if you want
    , <&pro_micro  3 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
    , <&pro_micro  4 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
    , <&pro_micro  5 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
    , <&pro_micro  6 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
    , <&pro_micro  8 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
    , <&pro_micro  9 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
    ;
};